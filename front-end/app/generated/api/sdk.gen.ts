// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { RootGetData, RootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, ChatCompletionApiV1ChatPostData, ChatCompletionApiV1ChatPostResponses, ChatCompletionApiV1ChatPostErrors, GenerateChatTitleApiV1GenerateTitlePostData, GenerateChatTitleApiV1GenerateTitlePostResponses, GenerateChatTitleApiV1GenerateTitlePostErrors } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 * Root endpoint for health check
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Chat Completion
 * Generate AI response using RAG (Retrieval-Augmented Generation)
 */
export const chatCompletionApiV1ChatPost = <ThrowOnError extends boolean = false>(options: Options<ChatCompletionApiV1ChatPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatCompletionApiV1ChatPostResponses, ChatCompletionApiV1ChatPostErrors, ThrowOnError>({
        url: '/api/v1/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Chat Title
 * Generate a concise title for chat content
 */
export const generateChatTitleApiV1GenerateTitlePost = <ThrowOnError extends boolean = false>(options: Options<GenerateChatTitleApiV1GenerateTitlePostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateChatTitleApiV1GenerateTitlePostResponses, GenerateChatTitleApiV1GenerateTitlePostErrors, ThrowOnError>({
        url: '/api/v1/generate-title',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
